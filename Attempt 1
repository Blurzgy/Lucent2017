# Lucent2017
chess
#include"langxun.h"
#include<algorithm>
#include<time.h>
#define maxn 10010
using namespace std;

int map[21][21];
int dx[] = {0, 1, 1, 1, 0, -1, -1, -1};
int dy[] = {-1, -1, 0, 1, 1, 1, 0, -1};
int x[500], y[500];

bool checkSecure(int x, int y)
{
    if(x<1 || x>19) return false;
    if(y<1 || y>19) return false;
    return !((x>=9 && x<=11) && (y>=9 && y<=11));
}

void ppp()
{
    int i, j;
    for(i = 1; i <= 19; i++)
    {
        for(j = 1; j <= 19; j++)
            printf("%d ", map[i][j]);
        printf("\n");
    }
}

struct cord
{
    int x;
    int y;
    int pow;
}avlb[maxn];
int ptr = 0;

void pppp()
{
    int i;
    for(i = 0; i < ptr; i++)
    {
        printf("%d:\tx = %d,\n\ty = %d,\n\tpow = %d.\n", i + 1, avlb[i].x, avlb[i].y, avlb[i].pow);
        printf("\tmap[%d][%d] = %d.\n\n", avlb[i].x, avlb[i].y, map[avlb[i].x][avlb[i].y]);
    }
}

void goThrough(int x, int y, int dx, int dy, int color)
{
    //printf("%d %d %d %d %d\n", x, y, dx, dy, color);
    int ene = (color == 1 ? 2 : 1);
    int i = 1, j = 1;
    int cnt = 1;
    bool breaker = false;
    for(i = 1; checkSecure(x+i*dx, y+i*dy); i++)
    {
        if(map[x+i*dx][y+i*dy] == ene)
        {
            int nx = x + j * dx;
            int ny = y + j * dy;
            for(j = 1; checkSecure(nx, ny); j++)
            {
                nx = x + j * dx;
                ny = y + j * dy;
                if(!checkSecure(nx, ny))
                {
                    breaker = true;
                    break;
                }
                else if(map[nx][ny] == color)
                {
                    breaker = true;
                    break;
                }
                //printf("nx = %d, ny = %d!\n", nx, ny);
                else if(map[nx][ny] == 0)
                {
                    avlb[ptr].x = nx;
                    avlb[ptr].y = ny;
                    avlb[ptr++].pow = cnt;
                    breaker = true;
                    break;
                }
            }
        }
        else if(map[x+i*dx][y+i*dy] == 0)break;
        cnt++;
        if(breaker)break;
    }
}

void Search(int color)
{
    int ene = (color == 1 ? 2 : 1);
    int i, j;
    for(i = 1; i <= 19; i++)
    {
        for(j = 1; j <= 19; j++)
        {
            if(checkSecure(i, j))
            {
                if(map[i][j] == color)
                {
                    int d;
                    for(d = 0; d < 8; d++)
                    {
                        int nx = i + dx[d];
                        int ny = j + dy[d];
                        if(map[nx][ny] == ene)
                        {
                            //printf("%d %d\n", i, j);
                            goThrough(i, j, dx[d], dy[d], color);
                        }
                    }
                }
            }
        }
    }
}

bool cmp(cord a, cord b)
{
    return a.pow > b.pow;
}

int main()
{
    srand(time(NULL));
    if(readBoard(map))
    {
        //printf("READ FAILED\n");
        return 0;
    }
    else
    {
        int color;
        if(readStep(x, y)%2 == 1)color = 2;
        else color = 1;
        //color = 1;
        //printf("Color = %d.\n", color);
        Search(color);
        //sort(avlb, avlb + ptr, cmp);
        //pppp();
        int n = rand() % ptr;
        printf("%d %d\n", avlb[n].x, avlb[n].y);
    }
    return 0;
}
